// Code generated by MockGen. DO NOT EDIT.
// Source: ../dao/workflow_execution_dao.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	model "github.com/Attsun1031/jobnetes/model"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
	reflect "reflect"
)

// MockWorkflowExecutionDao is a mock of WorkflowExecutionDao interface
type MockWorkflowExecutionDao struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowExecutionDaoMockRecorder
}

// MockWorkflowExecutionDaoMockRecorder is the mock recorder for MockWorkflowExecutionDao
type MockWorkflowExecutionDaoMockRecorder struct {
	mock *MockWorkflowExecutionDao
}

// NewMockWorkflowExecutionDao creates a new mock instance
func NewMockWorkflowExecutionDao(ctrl *gomock.Controller) *MockWorkflowExecutionDao {
	mock := &MockWorkflowExecutionDao{ctrl: ctrl}
	mock.recorder = &MockWorkflowExecutionDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkflowExecutionDao) EXPECT() *MockWorkflowExecutionDaoMockRecorder {
	return m.recorder
}

// FindById mocks base method
func (m *MockWorkflowExecutionDao) FindById(arg0 uint, arg1 *gorm.DB) *model.WorkflowExecution {
	ret := m.ctrl.Call(m, "FindById", arg0, arg1)
	ret0, _ := ret[0].(*model.WorkflowExecution)
	return ret0
}

// FindById indicates an expected call of FindById
func (mr *MockWorkflowExecutionDaoMockRecorder) FindById(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockWorkflowExecutionDao)(nil).FindById), arg0, arg1)
}

// Update mocks base method
func (m *MockWorkflowExecutionDao) Update(arg0 *model.WorkflowExecution, arg1 *gorm.DB) {
	m.ctrl.Call(m, "Update", arg0, arg1)
}

// Update indicates an expected call of Update
func (mr *MockWorkflowExecutionDaoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWorkflowExecutionDao)(nil).Update), arg0, arg1)
}

// FindUncompletedWorkflowExecs mocks base method
func (m *MockWorkflowExecutionDao) FindUncompletedWorkflowExecs(arg0 *gorm.DB) []*model.WorkflowExecution {
	ret := m.ctrl.Call(m, "FindUncompletedWorkflowExecs", arg0)
	ret0, _ := ret[0].([]*model.WorkflowExecution)
	return ret0
}

// FindUncompletedWorkflowExecs indicates an expected call of FindUncompletedWorkflowExecs
func (mr *MockWorkflowExecutionDaoMockRecorder) FindUncompletedWorkflowExecs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUncompletedWorkflowExecs", reflect.TypeOf((*MockWorkflowExecutionDao)(nil).FindUncompletedWorkflowExecs), arg0)
}
